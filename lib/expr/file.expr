package file

import strings

/*
  To solve the C library integration either:

  1. Make a c package that can directly use the functions and wraps them
    to return certain things and hide the underlying libc functions;
    this is essentially what Go does and is kinda dumb

  2. c.* are always public and can be used; compiler addition

  3. put the c functions (`fopen`, `fgets`, ...) will be functions in the
    language that can be used raw
*/

type File = {
  c.FILE* file = nil
  string mode = "r"
  string filename
  string filepath
  bool open

  function Read(int amount) -> string {
    string entireLine
    int count
    int ch = c.fgetc(this.file)

    while !c.feof(this.file) && count < amount {
      count = count + 1
      entireLine += ch
      ch = c.fgetc(this.file)
    }

    return entireLine
  }

  function Write(char[] text) {
    c.fputs(text, this.file)
  }

  function WriteString(string text) {
    Write(strings.CString(text))
  }

  function seekToPosition(int pos) {
    return c.fseek(this.file, pos, c.SEEK_SET)
  }

  function Length() -> int {
    defer seekToPosition(c.ftell(this.file))

    c.fseek(this.file, 0, c.SEEK_END)

    return c.ftell(this.file)
  }
}

function Open(string filepath, string mode) -> File {
  let filepathCStr = strings.CString(filepath)
  let modeCStr = strings.CString(mode)

  return File {
    file: c.fopen(filepathCStr, modeCStr),
    mode: modeCStr,
    filename: c.basename(filepathCStr),
    filepath: c.dirname(filepathCStr),
    open: true
  }
}

function WriteFile(string filepath, string contents, bool overWrite) {
  let file = c.fopen(strings.CString(filepath), "w")
  if file != nil {
    if !overwrite {
      c.fclose(file)
    }
  }

  c.fputs(strings.CString(contents), file)
  c.fclose(file)
}