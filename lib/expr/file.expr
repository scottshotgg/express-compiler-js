//package file

// For no dynamic variables
// use strict

// In order to allow the compiler to symbolize direct C references using c.*
// use unsafe

import strings

/*
  To solve the C library integration either:

  1. Make a c package that can directly use the functions and wraps them
    to return certain things and hide the underlying libc functions;
    this is essentially what Go does and is kinda dumb

  2. * are always public and can be used; compiler addition

  3. put the c functions (`fopen`, `fgets`, ...) will be functions in the
    language that can be used raw
*/

struct File = {
  FILE* file = nil
  string mode = "r"
  string filename
  string filepath
  bool open

  function Read(int amount) -> string {
    string entireLine
    int count
    int ch = fgetc(this.file)

    while !feof(this.file) && count < amount {
      count = count + 1
      entireLine += ch
      ch = fgetc(this.file)
    }

    return entireLine
  }

  function Write(char[] text) {
    fputs(text, this.file)
  }

  function WriteString(string text) {
    Write(strings.CString(text))
  }

  function seekToPosition(int pos) {
    return fseek(this.file, pos, SEEK_SET)
  }

  function Length() -> int {
    defer seekToPosition(ftell(this.file))

    fseek(this.file, 0, SEEK_END)

    return ftell(this.file)
  }
}

function Open(string filepath, string mode) -> File {
  let filepathCStr = strings.CString(filepath)
  let modeCStr = strings.CString(mode)

  return File {
    file: fopen(filepathCStr, modeCStr),
    mode: modeCStr,
    filename: basename(filepathCStr),
    filepath: dirname(filepathCStr),
    open: true
  }
}

function WriteFile(string filepath, string contents, bool overWrite) {
  let file = fopen(strings.CString(filepath), "w")
  if file != nil {
    if !overwrite {
      fclose(file)
    }
  }

  fputs(strings.CString(contents), file)
  fclose(file)
}