function strerror(int ERRNUM) -> char*
function strerror_r(int ERRNUM, char* BUF, size_t N) -> char*
function perror(const char* MESSAGE) -> void
function error(int STATUS, int ERRNUM, const char* FORMAT, -> void
function error_at_line(int STATUS, int ERRNUM, const char -> void
function warn(const char* FORMAT, ...) -> void
function vwarn(const char* FORMAT, va_list AP) -> void
function warnx(const char* FORMAT, ...) -> void
function vwarnx(const char* FORMAT, va_list AP) -> void
function err(int STATUS, const char* FORMAT, ...) -> void
function verr(int STATUS, const char* FORMAT, va_list AP) -> void
function errx(int STATUS, const char* FORMAT, ...) -> void
function verrx(int STATUS, const char* FORMAT, va_list AP) -> void
function malloc(size_t SIZE) -> void*
function free(void* PTR) -> void
function realloc(void* PTR, size_t NEWSIZE) -> void*
function reallocarray(void* PTR, size_t NMEMB, size_t SIZE) -> void*
function calloc(size_t COUNT, size_t ELTSIZE) -> void*
function aligned_alloc(size_t ALIGNMENT, size_t SIZE) -> void*
function memalign(size_t BOUNDARY, size_t SIZE) -> void*
function posix_memalign(void** MEMPTR, size_t ALIGNMENT, -> int
function valloc(size_t SIZE) -> void*
function mallopt(int PARAM, int VALUE) -> int
function mcheck(void(*ABORTFN)(enum mcheck_status STATUS)) -> int
function mcheck_status mprobe(void* POINTER) -> enum
function mallinfo mallinfo(void) -> struct
function mtrace(void) -> void
function muntrace(void) -> void
function obstack_init(struct obstack* OBSTACK-PTR) -> int
function obstack_alloc(struct obstack* OBSTACK-PTR, int -> void*
function obstack_copy(struct obstack* OBSTACK-PTR, void -> void*
function obstack_copy0(struct obstack* OBSTACK-PTR, void -> void*
function obstack_free(struct obstack* OBSTACK-PTR, void -> void
function obstack_blank(struct obstack* OBSTACK-PTR, int SIZE) -> void
function obstack_grow(struct obstack* OBSTACK-PTR, void -> void
function obstack_grow0(struct obstack* OBSTACK-PTR, void -> void
function obstack_1grow(struct obstack* OBSTACK-PTR, char C) -> void
function obstack_ptr_grow(struct obstack* OBSTACK-PTR, void -> void
function obstack_int_grow(struct obstack* OBSTACK-PTR, int -> void
function obstack_finish(struct obstack* OBSTACK-PTR) -> void*
function obstack_object_size(struct obstack* OBSTACK-PTR) -> int
function obstack_room(struct obstack* OBSTACK-PTR) -> int
function obstack_1grow_fast(struct obstack* OBSTACK-PTR, char -> void
function obstack_ptr_grow_fast(struct obstack* OBSTACK-PTR, -> void
function obstack_int_grow_fast(struct obstack* OBSTACK-PTR, -> void
function obstack_blank_fast(struct obstack* OBSTACK-PTR, int -> void
function obstack_base(struct obstack* OBSTACK-PTR) -> void*
function obstack_next_free(struct obstack* OBSTACK-PTR) -> void*
function obstack_object_size(struct obstack* OBSTACK-PTR) -> int
function alloca(size_t SIZE) -> void*
function brk(void* ADDR) -> int
function sbrk(ptrdiff_t DELTA) -> void*
function mprotect(void* ADDRESS, size_t LENGTH, int -> int
function pkey_alloc(unsigned int FLAGS, unsigned int -> int
function pkey_free(int KEY) -> int
function pkey_mprotect(void* ADDRESS, size_t LENGTH, int -> int
function pkey_set(int KEY, unsigned int RIGHTS) -> int
function pkey_get(int KEY) -> int
function mlock(const void* ADDR, size_t LEN) -> int
function mlock2(const void* ADDR, size_t LEN, unsigned int -> int
function munlock(const void* ADDR, size_t LEN) -> int
function mlockall(int FLAGS) -> int
function munlockall(void) -> int
function islower(int C) -> int
function isupper(int C) -> int
function isalpha(int C) -> int
function isdigit(int C) -> int
function isalnum(int C) -> int
function isxdigit(int C) -> int
function ispunct(int C) -> int
function isspace(int C) -> int
function isblank(int C) -> int
function isgraph(int C) -> int
function isprint(int C) -> int
function iscntrl(int C) -> int
function isascii(int C) -> int
function tolower(int C) -> int
function toupper(int C) -> int
function toascii(int C) -> int
function _tolower(int C) -> int
function _toupper(int C) -> int
function wctype(const char* PROPERTY) -> wctype_t
function iswctype(wint_t WC, wctype_t DESC) -> int
function iswalnum(wint_t WC) -> int
function iswalpha(wint_t WC) -> int
function iswcntrl(wint_t WC) -> int
function iswdigit(wint_t WC) -> int
function iswgraph(wint_t WC) -> int
function iswlower(wint_t WC) -> int
function iswprint(wint_t WC) -> int
function iswpunct(wint_t WC) -> int
function iswspace(wint_t WC) -> int
function iswupper(wint_t WC) -> int
function iswxdigit(wint_t WC) -> int
function iswblank(wint_t WC) -> int
function wctrans(const char* PROPERTY) -> wctrans_t
function towctrans(wint_t WC, wctrans_t DESC) -> wint_t
function towlower(wint_t WC) -> wint_t
function towupper(wint_t WC) -> wint_t
function strlen(const char* S) -> size_t
function wcslen(const wchar_t* WS) -> size_t
function strnlen(const char* S, size_t MAXLEN) -> size_t
function wcsnlen(const wchar_t* WS, size_t MAXLEN) -> size_t
function memcpy(void* restrict TO, const void* restrict -> void*
function wmemcpy(wchar_t* restrict WTO, const wchar_t -> wchar_t*
function mempcpy(void* restrict TO, const void* restrict -> void*
function wmempcpy(wchar_t* restrict WTO, const wchar_t -> wchar_t*
function memmove(void* TO, const void* FROM, size_t SIZE) -> void*
function wmemmove(wchar_t* WTO, const wchar_t* WFROM, -> wchar_t*
function memccpy(void* restrict TO, const void* restrict -> void*
function memset(void* BLOCK, int C, size_t SIZE) -> void*
function wmemset(wchar_t* BLOCK, wchar_t WC, size_t -> wchar_t*
function strcpy(char* restrict TO, const char* restrict -> char*
function wcscpy(wchar_t* restrict WTO, const wchar_t -> wchar_t*
function strdup(const char* S) -> char*
function wcsdup(const wchar_t* WS) -> wchar_t*
function stpcpy(char* restrict TO, const char* restrict -> char*
function wcpcpy(wchar_t* restrict WTO, const wchar_t -> wchar_t*
function bcopy(const void* FROM, void* TO, size_t SIZE) -> void
function bzero(void* BLOCK, size_t SIZE) -> void
function strcat(char* restrict TO, const char* restrict -> char*
function wcscat(wchar_t* restrict WTO, const wchar_t -> wchar_t*
function strncpy(char* restrict TO, const char* restrict -> char*
function wcsncpy(wchar_t* restrict WTO, const wchar_t -> wchar_t*
function strndup(const char* S, size_t SIZE) -> char*
function stpncpy(char* restrict TO, const char* restrict -> char*
function wcpncpy(wchar_t* restrict WTO, const wchar_t -> wchar_t*
function strncat(char* restrict TO, const char* restrict -> char*
function wcsncat(wchar_t* restrict WTO, const wchar_t -> wchar_t*
function memcmp(const void* A1, const void* A2, size_t SIZE) -> int
function wmemcmp(const wchar_t* A1, const wchar_t* A2, size_t -> int
function strcmp(const char* S1, const char* S2) -> int
function wcscmp(const wchar_t* WS1, const wchar_t* WS2) -> int
function strcasecmp(const char* S1, const char* S2) -> int
function wcscasecmp(const wchar_t* WS1, const wchar_t* WS2) -> int
function strncmp(const char* S1, const char* S2, size_t SIZE) -> int
function wcsncmp(const wchar_t* WS1, const wchar_t* WS2, -> int
function strncasecmp(const char* S1, const char* S2, size_t N) -> int
function wcsncasecmp(const wchar_t* WS1, const wchar_t* S2, -> int
function strverscmp(const char* S1, const char* S2) -> int
function bcmp(const void* A1, const void* A2, size_t SIZE) -> int
function strcoll(const char* S1, const char* S2) -> int
function wcscoll(const wchar_t* WS1, const wchar_t* WS2) -> int
function strxfrm(char* restrict TO, const char* restrict -> size_t
function wcsxfrm(wchar_t* restrict WTO, const wchar_t -> size_t
function memchr(const void* BLOCK, int C, size_t SIZE) -> void*
function wmemchr(const wchar_t* BLOCK, wchar_t WC, -> wchar_t*
function rawmemchr(const void* BLOCK, int C) -> void*
function memrchr(const void* BLOCK, int C, size_t SIZE) -> void*
function strchr(const char* STRING, int C) -> char*
function wcschr(const wchar_t* WSTRING, int WC) -> wchar_t*
function strchrnul(const char* STRING, int C) -> char*
function wcschrnul(const wchar_t* WSTRING, wchar_t WC) -> wchar_t*
function strrchr(const char* STRING, int C) -> char*
function wcsrchr(const wchar_t* WSTRING, wchar_t C) -> wchar_t*
function strstr(const char* HAYSTACK, const char* NEEDLE) -> char*
function wcsstr(const wchar_t* HAYSTACK, const wchar_t -> wchar_t*
function wcswcs(const wchar_t* HAYSTACK, const wchar_t -> wchar_t*
function strcasestr(const char* HAYSTACK, const char -> char*
function memmem(const void* HAYSTACK, size_t HAYSTACK-LEN, -> void*
function strspn(const char* STRING, const char* SKIPSET) -> size_t
function wcsspn(const wchar_t* WSTRING, const wchar_t -> size_t
function strcspn(const char* STRING, const char* STOPSET) -> size_t
function wcscspn(const wchar_t* WSTRING, const wchar_t -> size_t
function strpbrk(const char* STRING, const char* STOPSET) -> char*
function wcspbrk(const wchar_t* WSTRING, const wchar_t -> wchar_t*
function index(const char* STRING, int C) -> char*
function rindex(const char* STRING, int C) -> char*
function strtok(char* restrict NEWSTRING, const char -> char*
function wcstok(wchar_t* NEWSTRING, const wchar_t -> wchar_t*
function strtok_r(char* NEWSTRING, const char* DELIMITERS, -> char*
function strsep(char** STRING_PTR, const char* DELIMITER) -> char*
function basename(const char* FILENAME) -> char*
function basename(char* PATH) -> char*
function dirname(char* PATH) -> char*
function explicit_bzero(void* BLOCK, size_t LEN) -> void
function strfry(char* STRING) -> char*
function memfrob(void* MEM, size_t LENGTH) -> void*
function l64a(long int N) -> char*
function int a64l(const char* STRING) -> long
function argz_create(const* char ARGV[], char** ARGZ, -> error_t
function argz_create_sep(const char* STRING, int SEP, char -> error_t
function argz_count(const char* ARGZ, size_t ARGZ_LEN) -> size_t
function argz_extract(const char* ARGZ, size_t ARGZ_LEN, char -> void
function argz_stringify(char* ARGZ, size_t LEN, int SEP) -> void
function argz_add(char** ARGZ, size_t* ARGZ_LEN, const -> error_t
function argz_add_sep(char** ARGZ, size_t* ARGZ_LEN, const -> error_t
function argz_append(char** ARGZ, size_t* ARGZ_LEN, const -> error_t
function argz_delete(char** ARGZ, size_t* ARGZ_LEN, char -> void
function argz_insert(char** ARGZ, size_t* ARGZ_LEN, char -> error_t
function argz_next(const char* ARGZ, size_t ARGZ_LEN, const -> char*
function argz_replace(char** ARGZ, size_t* ARGZ_LEN, -> error_t
function envz_entry(const char* ENVZ, size_t ENVZ_LEN, -> char*
function envz_get(const char* ENVZ, size_t ENVZ_LEN, const -> char*
function envz_add(char** ENVZ, size_t* ENVZ_LEN, const -> error_t
function envz_merge(char** ENVZ, size_t* ENVZ_LEN, const -> error_t
function envz_strip(char** ENVZ, size_t* ENVZ_LEN) -> void
function envz_remove(char** ENVZ, size_t* ENVZ_LEN, const -> void
function mbsinit(const mbstate_t* PS) -> int
function btowc(int C) -> wint_t
function wctob(wint_t C) -> int
function mbrtowc(wchar_t* restrict PWC, const char -> size_t
function mbrlen(const char* restrict S, size_t N, mbstate_t -> size_t
function wcrtomb(char* restrict S, wchar_t WC, mbstate_t -> size_t
function mbsrtowcs(wchar_t* restrict DST, const char -> size_t
function wcsrtombs(char* restrict DST, const wchar_t -> size_t
function mbsnrtowcs(wchar_t* restrict DST, const char -> size_t
function wcsnrtombs(char* restrict DST, const wchar_t -> size_t
function mbtowc(wchar_t* restrict RESULT, const char* restrict -> int
function wctomb(char* STRING, wchar_t WCHAR) -> int
function mblen(const char* STRING, size_t SIZE) -> int
function mbstowcs(wchar_t* WSTRING, const char* STRING, -> size_t
function wcstombs(char* STRING, const wchar_t* WSTRING, -> size_t
function iconv_open(const char* TOCODE, const char -> iconv_t
function iconv_close(iconv_t CD) -> int
function iconv(iconv_t CD, char** INBUF, size_t -> size_t
function setlocale(int CATEGORY, const char* LOCALE) -> char*
function lconv* localeconv(void) -> struct
function nl_langinfo(nl_item ITEM) -> char*
function strfmon(char* S, size_t MAXSIZE, const char -> ssize_t
function rpmatch(const char* RESPONSE) -> int
function catopen(const char* CAT_NAME, int FLAG) -> nl_catd
function catgets(nl_catd CATALOG_DESC, int SET, int -> char*
function catclose(nl_catd CATALOG_DESC) -> int
function gettext(const char* MSGID) -> char*
function dgettext(const char* DOMAINNAME, const char -> char*
function dcgettext(const char* DOMAINNAME, const char -> char*
function textdomain(const char* DOMAINNAME) -> char*
function bindtextdomain(const char* DOMAINNAME, const char -> char*
function ngettext(const char* MSGID1, const char* MSGID2, -> char*
function dngettext(const char* DOMAIN, const char* MSGID1, -> char*
function dcngettext(const char* DOMAIN, const char* MSGID1, -> char*
function bind_textdomain_codeset(const char* DOMAINNAME, -> char*
function lfind(const void* KEY, const void* BASE, size_t -> void*
function lsearch(const void* KEY, void* BASE, size_t -> void*
function bsearch(const void* KEY, const void* ARRAY, size_t -> void*
function qsort(void* ARRAY, size_t COUNT, size_t SIZE, -> void
function hcreate(size_t NEL) -> int
function hdestroy(void) -> void
function hsearch(ENTRY ITEM, ACTION ACTION) -> ENTRY*
function hcreate_r(size_t NEL, struct hsearch_data* HTAB) -> int
function hdestroy_r(struct hsearch_data* HTAB) -> void
function hsearch_r(ENTRY ITEM, ACTION ACTION, ENTRY* *RETVAL, -> int
function tsearch(const void* KEY, void** ROOTP, -> void*
function tfind(const void* KEY, void* const* ROOTP, -> void*
function tdelete(const void* KEY, void** ROOTP, -> void*
function tdestroy(void* VROOT, __free_fn_t FREEFCT) -> void
function twalk(const void* ROOT, __action_fn_t ACTION) -> void
function fnmatch(const char* PATTERN, const char* STRING, int -> int
function glob(const char* PATTERN, int FLAGS, int(*ERRFUNC) -> int
function glob64(const char* PATTERN, int FLAGS, int(*ERRFUNC) -> int
function globfree(glob_t* PGLOB) -> void
function globfree64(glob64_t* PGLOB) -> void
function regcomp(regex_t* restrict COMPILED, const char -> int
function regexec(const regex_t* restrict COMPILED, const char -> int
function regfree(regex_t* COMPILED) -> void
function regerror(int ERRCODE, const regex_t* restrict -> size_t
function wordexp(const char* WORDS, wordexp_t -> int
function wordfree(wordexp_t* WORD-VECTOR-PTR) -> void
function fopen(const char* FILENAME, const char* OPENTYPE) -> FILE*
function fopen64(const char* FILENAME, const char -> FILE*
function freopen(const char* FILENAME, const char -> FILE*
function freopen64(const char* FILENAME, const char -> FILE*
function __freadable(FILE* STREAM) -> int
function __fwritable(FILE* STREAM) -> int
function __freading(FILE* STREAM) -> int
function __fwriting(FILE* STREAM) -> int
function fclose(FILE* STREAM) -> int
function fcloseall(void) -> int
function flockfile(FILE* STREAM) -> void
function ftrylockfile(FILE* STREAM) -> int
function funlockfile(FILE* STREAM) -> void
function __fsetlocking(FILE* STREAM, int TYPE) -> int
function fwide(FILE* STREAM, int MODE) -> int
function fputc(int C, FILE* STREAM) -> int
function fputwc(wchar_t WC, FILE* STREAM) -> wint_t
function fputc_unlocked(int C, FILE* STREAM) -> int
function fputwc_unlocked(wchar_t WC, FILE* STREAM) -> wint_t
function putc(int C, FILE* STREAM) -> int
function putwc(wchar_t WC, FILE* STREAM) -> wint_t
function putc_unlocked(int C, FILE* STREAM) -> int
function putwc_unlocked(wchar_t WC, FILE* STREAM) -> wint_t
function putchar(int C) -> int
function putwchar(wchar_t WC) -> wint_t
function putchar_unlocked(int C) -> int
function putwchar_unlocked(wchar_t WC) -> wint_t
function fputs(const char* S, FILE* STREAM) -> int
function fputws(const wchar_t* WS, FILE* STREAM) -> int
function fputs_unlocked(const char* S, FILE* STREAM) -> int
function fputws_unlocked(const wchar_t* WS, FILE* STREAM) -> int
function puts(const char* S) -> int
function putw(int W, FILE* STREAM) -> int
function fgetc(FILE* STREAM) -> int
function fgetwc(FILE* STREAM) -> wint_t
function fgetc_unlocked(FILE* STREAM) -> int
function fgetwc_unlocked(FILE* STREAM) -> wint_t
function getc(FILE* STREAM) -> int
function getwc(FILE* STREAM) -> wint_t
function getc_unlocked(FILE* STREAM) -> int
function getwc_unlocked(FILE* STREAM) -> wint_t
function getchar(void) -> int
function getwchar(void) -> wint_t
function getchar_unlocked(void) -> int
function getwchar_unlocked(void) -> wint_t
function getw(FILE* STREAM) -> int
function getline(char** LINEPTR, size_t* N, FILE* STREAM) -> ssize_t
function getdelim(char** LINEPTR, size_t* N, int -> ssize_t
function fgets(char* S, int COUNT, FILE* STREAM) -> char*
function fgetws(wchar_t* WS, int COUNT, FILE* STREAM) -> wchar_t*
function fgets_unlocked(char* S, int COUNT, FILE* STREAM) -> char*
function fgetws_unlocked(wchar_t* WS, int COUNT, FILE -> wchar_t*
function ungetc(int C, FILE* STREAM) -> int
function ungetwc(wint_t WC, FILE* STREAM) -> wint_t
function fread(void* DATA, size_t SIZE, size_t COUNT, FILE -> size_t
function fread_unlocked(void* DATA, size_t SIZE, size_t -> size_t
function fwrite(const void* DATA, size_t SIZE, size_t -> size_t
function fwrite_unlocked(const void* DATA, size_t SIZE, -> size_t
function printf(const char* TEMPLATE, ...) -> int
function wprintf(const wchar_t* TEMPLATE, ...) -> int
function fprintf(FILE* STREAM, const char* TEMPLATE, ...) -> int
function fwprintf(FILE* STREAM, const wchar_t* TEMPLATE, ...) -> int
function sprintf(char* S, const char* TEMPLATE, ...) -> int
function swprintf(wchar_t* WS, size_t SIZE, const wchar_t -> int
function snprintf(char* S, size_t SIZE, const char* TEMPLATE, -> int
function asprintf(char** PTR, const char* TEMPLATE, ...) -> int
function obstack_printf(struct obstack* OBSTACK, const char -> int
function vprintf(const char* TEMPLATE, va_list AP) -> int
function vwprintf(const wchar_t* TEMPLATE, va_list AP) -> int
function vfprintf(FILE* STREAM, const char* TEMPLATE, va_list -> int
function vfwprintf(FILE* STREAM, const wchar_t* TEMPLATE, -> int
function vsprintf(char* S, const char* TEMPLATE, va_list AP) -> int
function vswprintf(wchar_t* WS, size_t SIZE, const wchar_t -> int
function vsnprintf(char* S, size_t SIZE, const char* TEMPLATE, -> int
function vasprintf(char** PTR, const char* TEMPLATE, va_list -> int
function obstack_vprintf(struct obstack* OBSTACK, const char -> int
function parse_printf_format(const char* TEMPLATE, size_t -> size_t
function register_printf_function(int SPEC, printf_function -> int
function printf_size(FILE* FP, const struct printf_info* INFO, -> int
function printf_size_info(const struct printf_info* INFO, -> int
function scanf(const char* TEMPLATE, ...) -> int
function wscanf(const wchar_t* TEMPLATE, ...) -> int
function fscanf(FILE* STREAM, const char* TEMPLATE, ...) -> int
function fwscanf(FILE* STREAM, const wchar_t* TEMPLATE, ...) -> int
function sscanf(const char* S, const char* TEMPLATE, ...) -> int
function swscanf(const wchar_t* WS, const wchar_t* TEMPLATE, -> int
function vscanf(const char* TEMPLATE, va_list AP) -> int
function vwscanf(const wchar_t* TEMPLATE, va_list AP) -> int
function vfscanf(FILE* STREAM, const char* TEMPLATE, va_list -> int
function vfwscanf(FILE* STREAM, const wchar_t* TEMPLATE, -> int
function vsscanf(const char* S, const char* TEMPLATE, va_list -> int
function vswscanf(const wchar_t* S, const wchar_t* TEMPLATE, -> int
function feof(FILE* STREAM) -> int
function feof_unlocked(FILE* STREAM) -> int
function ferror(FILE* STREAM) -> int
function ferror_unlocked(FILE* STREAM) -> int
function clearerr(FILE* STREAM) -> void
function clearerr_unlocked(FILE* STREAM) -> void
function int ftell(FILE* STREAM) -> long
function ftello(FILE* STREAM) -> off_t
function ftello64(FILE* STREAM) -> off64_t
function fseek(FILE* STREAM, long int OFFSET, int WHENCE) -> int
function fseeko(FILE* STREAM, off_t OFFSET, int WHENCE) -> int
function fseeko64(FILE* STREAM, off64_t OFFSET, int WHENCE) -> int
function rewind(FILE* STREAM) -> void
function fgetpos(FILE* STREAM, fpos_t* POSITION) -> int
function fgetpos64(FILE* STREAM, fpos64_t* POSITION) -> int
function fsetpos(FILE* STREAM, const fpos_t* POSITION) -> int
function fsetpos64(FILE* STREAM, const fpos64_t* POSITION) -> int
function fflush(FILE* STREAM) -> int
function fflush_unlocked(FILE* STREAM) -> int
function _flushlbf(void) -> void
function __fpurge(FILE* STREAM) -> void
function setvbuf(FILE* STREAM, char* BUF, int MODE, size_t -> int
function setbuf(FILE* STREAM, char* BUF) -> void
function setbuffer(FILE* STREAM, char* BUF, size_t SIZE) -> void
function setlinebuf(FILE* STREAM) -> void
function __flbf(FILE* STREAM) -> int
function __fbufsize(FILE* STREAM) -> size_t
function __fpending(FILE* STREAM) -> size_t
function fmemopen(void* BUF, size_t SIZE, const char -> FILE*
function open_memstream(char** PTR, size_t* SIZELOC) -> FILE*
function fopencookie(void* COOKIE, const char* OPENTYPE, -> FILE*
function fmtmsg(long int CLASSIFICATION, const char* LABEL, -> int
function addseverity(int SEVERITY, const char* STRING) -> int
function open(const char* FILENAME, int FLAGS[, mode_t MODE]) -> int
function open64(const char* FILENAME, int FLAGS[, mode_t -> int
function close(int FILEDES) -> int
function read(int FILEDES, void* BUFFER, size_t SIZE) -> ssize_t
function pread(int FILEDES, void* BUFFER, size_t SIZE, -> ssize_t
function pread64(int FILEDES, void* BUFFER, size_t SIZE, -> ssize_t
function write(int FILEDES, const void* BUFFER, size_t -> ssize_t
function pwrite(int FILEDES, const void* BUFFER, size_t -> ssize_t
function pwrite64(int FILEDES, const void* BUFFER, size_t -> ssize_t
function lseek(int FILEDES, off_t OFFSET, int WHENCE) -> off_t
function lseek64(int FILEDES, off64_t OFFSET, int WHENCE) -> off64_t
function fdopen(int FILEDES, const char* OPENTYPE) -> FILE*
function fileno(FILE* STREAM) -> int
function fileno_unlocked(FILE* STREAM) -> int
function readv(int FILEDES, const struct iovec* VECTOR, -> ssize_t
function writev(int FILEDES, const struct iovec* VECTOR, -> ssize_t
function preadv(int FD, const struct iovec* IOV, int -> ssize_t
function preadv64(int FD, const struct iovec* IOV, int -> ssize_t
function pwritev(int FD, const struct iovec* IOV, int -> ssize_t
function pwritev64(int FD, const struct iovec* IOV, int -> ssize_t
function preadv2(int FD, const struct iovec* IOV, int -> ssize_t
function preadv64v2(int FD, const struct iovec* IOV, int -> ssize_t
function pwritev2(int FD, const struct iovec* IOV, int -> ssize_t
function pwritev64v2(int FD, const struct iovec* IOV, int -> ssize_t
function copy_file_range(int INPUTFD, off64_t* INPUTPOS, -> ssize_t
function mmap(void* ADDRESS, size_t LENGTH, int PROTECT, -> void*
function mmap64(void* ADDRESS, size_t LENGTH, int PROTECT, -> void*
function munmap(void* ADDR, size_t LENGTH) -> int
function msync(void* ADDRESS, size_t LENGTH, int FLAGS) -> int
function mremap(void* ADDRESS, size_t LENGTH, size_t -> void*
function madvise(void* ADDR, size_t LENGTH, int ADVICE) -> int
function shm_open(const char* NAME, int OFLAG, mode_t MODE) -> int
function shm_unlink(const char* NAME) -> int
function memfd_create(const char* NAME, unsigned int FLAGS) -> int
function select(int NFDS, fd_set* READ-FDS, fd_set* WRITE-FDS, -> int
function sync(void) -> void
function fsync(int FILDES) -> int
function fdatasync(int FILDES) -> int
function aio_read(struct aiocb* AIOCBP) -> int
function aio_read64(struct aiocb64* AIOCBP) -> int
function aio_write(struct aiocb* AIOCBP) -> int
function aio_write64(struct aiocb64* AIOCBP) -> int
function lio_listio(int MODE, struct aiocb* const LIST[], int -> int
function lio_listio64(int MODE, struct aiocb64* const LIST[], -> int
function aio_error(const struct aiocb* AIOCBP) -> int
function aio_error64(const struct aiocb64* AIOCBP) -> int
function aio_return(struct aiocb* AIOCBP) -> ssize_t
function aio_return64(struct aiocb64* AIOCBP) -> ssize_t
function aio_fsync(int OP, struct aiocb* AIOCBP) -> int
function aio_fsync64(int OP, struct aiocb64* AIOCBP) -> int
function aio_suspend(const struct aiocb* const LIST[], int -> int
function aio_suspend64(const struct aiocb64* const LIST[], int -> int
function aio_cancel(int FILDES, struct aiocb* AIOCBP) -> int
function aio_cancel64(int FILDES, struct aiocb64* AIOCBP) -> int
function aio_init(const struct aioinit* INIT) -> void
function fcntl(int FILEDES, int COMMAND, ...) -> int
function dup(int OLD) -> int
function dup2(int OLD, int NEW) -> int
function ioctl(int FILEDES, int COMMAND, ...) -> int
function getcwd(char* BUFFER, size_t SIZE) -> char*
function get_current_dir_name(void) -> char*
function chdir(const char* FILENAME) -> int
function fchdir(int FILEDES) -> int
function IFTODT(mode_t MODE) -> int
function DTTOIF(int DTYPE) -> mode_t
function opendir(const char* DIRNAME) -> DIR*
function fdopendir(int FD) -> DIR*
function dirfd(DIR* DIRSTREAM) -> int
function dirent* readdir(DIR* DIRSTREAM) -> struct
function readdir_r(DIR* DIRSTREAM, struct dirent* ENTRY, -> int
function dirent64* readdir64(DIR* DIRSTREAM) -> struct
function readdir64_r(DIR* DIRSTREAM, struct dirent64* ENTRY, -> int
function closedir(DIR* DIRSTREAM) -> int
function rewinddir(DIR* DIRSTREAM) -> void
function int telldir(DIR* DIRSTREAM) -> long
function seekdir(DIR* DIRSTREAM, long int POS) -> void
function scandir(const char* DIR, struct dirent* **NAMELIST, -> int
function alphasort(const struct dirent* *A, const struct -> int
function versionsort(const struct dirent* *A, const struct -> int
function scandir64(const char* DIR, struct dirent64 -> int
function alphasort64(const struct dirent64* *A, const struct -> int
function versionsort64(const struct dirent64* *A, const struct -> int
function ftw(const char* FILENAME, __ftw_func_t FUNC, int -> int
function ftw64(const char* FILENAME, __ftw64_func_t FUNC, int -> int
function nftw(const char* FILENAME, __nftw_func_t FUNC, int -> int
function nftw64(const char* FILENAME, __nftw64_func_t FUNC, -> int
function link(const char* OLDNAME, const char* NEWNAME) -> int
function linkat(int oldfd, const char* OLDNAME, int newfd, -> int
function symlink(const char* OLDNAME, const char* NEWNAME) -> int
function readlink(const char* FILENAME, char* BUFFER, -> ssize_t
function canonicalize_file_name(const char* NAME) -> char*
function realpath(const char* restrict NAME, char* restrict -> char*
function unlink(const char* FILENAME) -> int
function rmdir(const char* FILENAME) -> int
function remove(const char* FILENAME) -> int
function rename(const char* OLDNAME, const char* NEWNAME) -> int
function mkdir(const char* FILENAME, mode_t MODE) -> int
function stat(const char* FILENAME, struct stat* BUF) -> int
function stat64(const char* FILENAME, struct stat64* BUF) -> int
function fstat(int FILEDES, struct stat* BUF) -> int
function fstat64(int FILEDES, struct stat64* BUF) -> int
function lstat(const char* FILENAME, struct stat* BUF) -> int
function lstat64(const char* FILENAME, struct stat64* BUF) -> int
function chown(const char* FILENAME, uid_t OWNER, gid_t GROUP) -> int
function fchown(int FILEDES, uid_t OWNER, gid_t GROUP) -> int
function umask(mode_t MASK) -> mode_t
function getumask(void) -> mode_t
function chmod(const char* FILENAME, mode_t MODE) -> int
function fchmod(int FILEDES, mode_t MODE) -> int
function access(const char* FILENAME, int HOW) -> int
function utime(const char* FILENAME, const struct utimbuf -> int
function utimes(const char* FILENAME, const struct timeval -> int
function lutimes(const char* FILENAME, const struct timeval -> int
function futimes(int FD, const struct timeval TVP[2]) -> int
function truncate(const char* FILENAME, off_t LENGTH) -> int
function truncate64(const char* NAME, off64_t LENGTH) -> int
function ftruncate(int FD, off_t LENGTH) -> int
function ftruncate64(int ID, off64_t LENGTH) -> int
function posix_fallocate(int FD, off_t OFFSET, off_t LENGTH) -> int
function posix_fallocate64(int FD, off64_t OFFSET, off64_t -> int
function mknod(const char* FILENAME, mode_t MODE, dev_t DEV) -> int
function tmpfile(void) -> FILE*
function tmpfile64(void) -> FILE*
function tmpnam(char* RESULT) -> char*
function tmpnam_r(char* RESULT) -> char*
function tempnam(const char* DIR, const char* PREFIX) -> char*
function mktemp(char* TEMPLATE) -> char*
function mkstemp(char* TEMPLATE) -> int
function mkdtemp(char* TEMPLATE) -> char*
function pipe(int FILEDES[2]) -> int
function popen(const char* COMMAND, const char* MODE) -> FILE*
function pclose(FILE* STREAM) -> int
function mkfifo(const char* FILENAME, mode_t MODE) -> int
function bind(int SOCKET, struct sockaddr* ADDR, socklen_t -> int
function getsockname(int SOCKET, struct sockaddr* ADDR, -> int
function int if_nametoindex(const char* IFNAME) -> unsigned
function if_indextoname(unsigned int IFINDEX, char* IFNAME) -> char*
function if_nameindex* if_nameindex(void) -> struct
function if_freenameindex(struct if_nameindex* PTR) -> void
function inet_aton(const char* NAME, struct in_addr* ADDR) -> int
function inet_addr(const char* NAME) -> uint32_t
function inet_network(const char* NAME) -> uint32_t
function inet_ntoa(struct in_addr ADDR) -> char*
function in_addr inet_makeaddr(uint32_t NET, uint32_t -> struct
function inet_lnaof(struct in_addr ADDR) -> uint32_t
function inet_netof(struct in_addr ADDR) -> uint32_t
function inet_pton(int AF, const char* CP, void* BUF) -> int
function char* inet_ntop(int AF, const void* CP, char* BUF, -> const
function hostent* gethostbyname(const char* NAME) -> struct
function hostent* gethostbyname2(const char* NAME, int AF) -> struct
function hostent* gethostbyaddr(const void* ADDR, -> struct
function gethostbyname_r(const char* restrict NAME, struct -> int
function gethostbyname2_r(const char* NAME, int AF, struct -> int
function gethostbyaddr_r(const void* ADDR, socklen_t LENGTH, -> int
function sethostent(int STAYOPEN) -> void
function hostent* gethostent(void) -> struct
function endhostent(void) -> void
function servent* getservbyname(const char* NAME, const -> struct
function servent* getservbyport(int PORT, const char -> struct
function setservent(int STAYOPEN) -> void
function servent* getservent(void) -> struct
function endservent(void) -> void
function htons(uint16_t HOSTSHORT) -> uint16_t
function ntohs(uint16_t NETSHORT) -> uint16_t
function htonl(uint32_t HOSTLONG) -> uint32_t
function ntohl(uint32_t NETLONG) -> uint32_t
function protoent* getprotobyname(const char* NAME) -> struct
function protoent* getprotobynumber(int PROTOCOL) -> struct
function setprotoent(int STAYOPEN) -> void
function protoent* getprotoent(void) -> struct
function endprotoent(void) -> void
function socket(int NAMESPACE, int STYLE, int PROTOCOL) -> int
function shutdown(int SOCKET, int HOW) -> int
function socketpair(int NAMESPACE, int STYLE, int PROTOCOL, -> int
function connect(int SOCKET, struct sockaddr* ADDR, socklen_t -> int
function listen(int SOCKET, int N) -> int
function accept(int SOCKET, struct sockaddr* ADDR, socklen_t -> int
function getpeername(int SOCKET, struct sockaddr* ADDR, -> int
function send(int SOCKET, const void* BUFFER, size_t SIZE, -> ssize_t
function recv(int SOCKET, void* BUFFER, size_t SIZE, int -> ssize_t
function sendto(int SOCKET, const void* BUFFER, size_t -> ssize_t
function recvfrom(int SOCKET, void* BUFFER, size_t SIZE, -> ssize_t
function getsockopt(int SOCKET, int LEVEL, int OPTNAME, void -> int
function setsockopt(int SOCKET, int LEVEL, int OPTNAME, const -> int
function netent* getnetbyname(const char* NAME) -> struct
function netent* getnetbyaddr(uint32_t NET, int TYPE) -> struct
function setnetent(int STAYOPEN) -> void
function netent* getnetent(void) -> struct
function endnetent(void) -> void
function isatty(int FILEDES) -> int
function ttyname(int FILEDES) -> char*
function ttyname_r(int FILEDES, char* BUF, size_t LEN) -> int
function tcgetattr(int FILEDES, struct termios* TERMIOS-P) -> int
function tcsetattr(int FILEDES, int WHEN, const struct termios -> int
function cfgetospeed(const struct termios* TERMIOS-P) -> speed_t
function cfgetispeed(const struct termios* TERMIOS-P) -> speed_t
function cfsetospeed(struct termios* TERMIOS-P, speed_t SPEED) -> int
function cfsetispeed(struct termios* TERMIOS-P, speed_t SPEED) -> int
function cfsetspeed(struct termios* TERMIOS-P, speed_t SPEED) -> int
function cfmakeraw(struct termios* TERMIOS-P) -> void
function gtty(int FILEDES, struct sgttyb* ATTRIBUTES) -> int
function stty(int FILEDES, const struct sgttyb* ATTRIBUTES) -> int
function tcsendbreak(int FILEDES, int DURATION) -> int
function tcdrain(int FILEDES) -> int
function tcflush(int FILEDES, int QUEUE) -> int
function tcflow(int FILEDES, int ACTION) -> int
function getpass(const char* PROMPT) -> char*
function getpt(void) -> int
function grantpt(int FILEDES) -> int
function unlockpt(int FILEDES) -> int
function ptsname(int FILEDES) -> char*
function ptsname_r(int FILEDES, char* BUF, size_t LEN) -> int
function openpty(int* AMASTER, int* ASLAVE, char* NAME, const -> int
function forkpty(int* AMASTER, char* NAME, const struct -> int
function openlog(const char* IDENT, int OPTION, int FACILITY) -> void
function syslog(int FACILITY_PRIORITY, const char* FORMAT, -> void
function vsyslog(int FACILITY_PRIORITY, const char* FORMAT, -> void
function closelog(void) -> void
function setlogmask(int MASK) -> int
function sin(double X) -> double
function sinf(float X) -> float
function double sinl(long double X) -> long
function sinfN(_FloatN X) -> _FloatN
function sinfNx(_FloatNx X) -> _FloatNx
function cos(double X) -> double
function cosf(float X) -> float
function double cosl(long double X) -> long
function cosfN(_FloatN X) -> _FloatN
function cosfNx(_FloatNx X) -> _FloatNx
function tan(double X) -> double
function tanf(float X) -> float
function double tanl(long double X) -> long
function tanfN(_FloatN X) -> _FloatN
function tanfNx(_FloatNx X) -> _FloatNx
function sincos(double X, double* SINX, double* COSX) -> void
function sincosf(float X, float* SINX, float* COSX) -> void
function sincosl(long double X, long double* SINX, long -> void
function sincosfN(_FloatN X, _FloatN* SINX, _FloatN* COSX) -> _FloatN
function sincosfNx(_FloatNx X, _FloatNx* SINX, _FloatNx -> _FloatNx
function double csin(complex double Z) -> complex
function float csinf(complex float Z) -> complex
function long double csinl(complex long double Z) -> complex
function _FloatN csinfN(complex _FloatN Z) -> complex
function _FloatNx csinfNx(complex _FloatNx Z) -> complex
function double ccos(complex double Z) -> complex
function float ccosf(complex float Z) -> complex
function long double ccosl(complex long double Z) -> complex
function _FloatN ccosfN(complex _FloatN Z) -> complex
function _FloatNx ccosfNx(complex _FloatNx Z) -> complex
function double ctan(complex double Z) -> complex
function float ctanf(complex float Z) -> complex
function long double ctanl(complex long double Z) -> complex
function _FloatN ctanfN(complex _FloatN Z) -> complex
function _FloatNx ctanfNx(complex _FloatNx Z) -> complex
function asin(double X) -> double
function asinf(float X) -> float
function double asinl(long double X) -> long
function asinfN(_FloatN X) -> _FloatN
function asinfNx(_FloatNx X) -> _FloatNx
function acos(double X) -> double
function acosf(float X) -> float
function double acosl(long double X) -> long
function acosfN(_FloatN X) -> _FloatN
function acosfNx(_FloatNx X) -> _FloatNx
function atan(double X) -> double
function atanf(float X) -> float
function double atanl(long double X) -> long
function atanfN(_FloatN X) -> _FloatN
function atanfNx(_FloatNx X) -> _FloatNx
function atan2(double Y, double X) -> double
function atan2f(float Y, float X) -> float
function double atan2l(long double Y, long double X) -> long
function atan2fN(_FloatN Y, _FloatN X) -> _FloatN
function atan2fNx(_FloatNx Y, _FloatNx X) -> _FloatNx
function double casin(complex double Z) -> complex
function float casinf(complex float Z) -> complex
function long double casinl(complex long double Z) -> complex
function _FloatN casinfN(complex _FloatN Z) -> complex
function _FloatNx casinfNx(complex _FloatNx Z) -> complex
function double cacos(complex double Z) -> complex
function float cacosf(complex float Z) -> complex
function long double cacosl(complex long double Z) -> complex
function _FloatN cacosfN(complex _FloatN Z) -> complex
function _FloatNx cacosfNx(complex _FloatNx Z) -> complex
function double catan(complex double Z) -> complex
function float catanf(complex float Z) -> complex
function long double catanl(complex long double Z) -> complex
function _FloatN catanfN(complex _FloatN Z) -> complex
function _FloatNx catanfNx(complex _FloatNx Z) -> complex
function exp(double X) -> double
function expf(float X) -> float
function double expl(long double X) -> long
function expfN(_FloatN X) -> _FloatN
function expfNx(_FloatNx X) -> _FloatNx
function exp2(double X) -> double
function exp2f(float X) -> float
function double exp2l(long double X) -> long
function exp2fN(_FloatN X) -> _FloatN
function exp2fNx(_FloatNx X) -> _FloatNx
function exp10(double X) -> double
function exp10f(float X) -> float
function double exp10l(long double X) -> long
function exp10fN(_FloatN X) -> _FloatN
function exp10fNx(_FloatNx X) -> _FloatNx
function log(double X) -> double
function logf(float X) -> float
function double logl(long double X) -> long
function logfN(_FloatN X) -> _FloatN
function logfNx(_FloatNx X) -> _FloatNx
function log10(double X) -> double
function log10f(float X) -> float
function double log10l(long double X) -> long
function log10fN(_FloatN X) -> _FloatN
function log10fNx(_FloatNx X) -> _FloatNx
function log2(double X) -> double
function log2f(float X) -> float
function double log2l(long double X) -> long
function log2fN(_FloatN X) -> _FloatN
function log2fNx(_FloatNx X) -> _FloatNx
function logb(double X) -> double
function logbf(float X) -> float
function double logbl(long double X) -> long
function logbfN(_FloatN X) -> _FloatN
function logbfNx(_FloatNx X) -> _FloatNx
function ilogb(double X) -> int
function ilogbf(float X) -> int
function ilogbl(long double X) -> int
function ilogbfN(_FloatN X) -> int
function ilogbfNx(_FloatNx X) -> int
function int llogb(double X) -> long
function int llogbf(float X) -> long
function int llogbl(long double X) -> long
function int llogbfN(_FloatN X) -> long
function int llogbfNx(_FloatNx X) -> long
function pow(double BASE, double POWER) -> double
function powf(float BASE, float POWER) -> float
function double powl(long double BASE, long double POWER) -> long
function powfN(_FloatN BASE, _FloatN POWER) -> _FloatN
function powfNx(_FloatNx BASE, _FloatNx POWER) -> _FloatNx
function sqrt(double X) -> double
function sqrtf(float X) -> float
function double sqrtl(long double X) -> long
function sqrtfN(_FloatN X) -> _FloatN
function sqrtfNx(_FloatNx X) -> _FloatNx
function cbrt(double X) -> double
function cbrtf(float X) -> float
function double cbrtl(long double X) -> long
function cbrtfN(_FloatN X) -> _FloatN
function cbrtfNx(_FloatNx X) -> _FloatNx
function hypot(double X, double Y) -> double
function hypotf(float X, float Y) -> float
function double hypotl(long double X, long double Y) -> long
function hypotfN(_FloatN X, _FloatN Y) -> _FloatN
function hypotfNx(_FloatNx X, _FloatNx Y) -> _FloatNx
function expm1(double X) -> double
function expm1f(float X) -> float
function double expm1l(long double X) -> long
function expm1fN(_FloatN X) -> _FloatN
function expm1fNx(_FloatNx X) -> _FloatNx
function log1p(double X) -> double
function log1pf(float X) -> float
function double log1pl(long double X) -> long
function log1pfN(_FloatN X) -> _FloatN
function log1pfNx(_FloatNx X) -> _FloatNx
function double cexp(complex double Z) -> complex
function float cexpf(complex float Z) -> complex
function long double cexpl(complex long double Z) -> complex
function _FloatN cexpfN(complex _FloatN Z) -> complex
function _FloatNx cexpfNx(complex _FloatNx Z) -> complex
function double clog(complex double Z) -> complex
function float clogf(complex float Z) -> complex
function long double clogl(complex long double Z) -> complex
function _FloatN clogfN(complex _FloatN Z) -> complex
function _FloatNx clogfNx(complex _FloatNx Z) -> complex
function double clog10(complex double Z) -> complex
function float clog10f(complex float Z) -> complex
function long double clog10l(complex long double Z) -> complex
function _FloatN clog10fN(complex _FloatN Z) -> complex
function _FloatNx clog10fNx(complex _FloatNx Z) -> complex
function double csqrt(complex double Z) -> complex
function float csqrtf(complex float Z) -> complex
function long double csqrtl(complex long double Z) -> complex
function _FloatN csqrtfN(_FloatN Z) -> complex
function _FloatNx csqrtfNx(complex _FloatNx Z) -> complex
function double cpow(complex double BASE, complex double -> complex
function float cpowf(complex float BASE, complex float -> complex
function long double cpowl(complex long double BASE, -> complex
function _FloatN cpowfN(complex _FloatN BASE, complex -> complex
function _FloatNx cpowfNx(complex _FloatNx BASE, complex -> complex
function sinh(double X) -> double
function sinhf(float X) -> float
function double sinhl(long double X) -> long
function sinhfN(_FloatN X) -> _FloatN
function sinhfNx(_FloatNx X) -> _FloatNx
function cosh(double X) -> double
function coshf(float X) -> float
function double coshl(long double X) -> long
function coshfN(_FloatN X) -> _FloatN
function coshfNx(_FloatNx X) -> _FloatNx
function tanh(double X) -> double
function tanhf(float X) -> float
function double tanhl(long double X) -> long
function tanhfN(_FloatN X) -> _FloatN
function tanhfNx(_FloatNx X) -> _FloatNx
function double csinh(complex double Z) -> complex
function float csinhf(complex float Z) -> complex
function long double csinhl(complex long double Z) -> complex
function _FloatN csinhfN(complex _FloatN Z) -> complex
function _FloatNx csinhfNx(complex _FloatNx Z) -> complex
function double ccosh(complex double Z) -> complex
function float ccoshf(complex float Z) -> complex
function long double ccoshl(complex long double Z) -> complex
function _FloatN ccoshfN(complex _FloatN Z) -> complex
function _FloatNx ccoshfNx(complex _FloatNx Z) -> complex
function double ctanh(complex double Z) -> complex
function float ctanhf(complex float Z) -> complex
function long double ctanhl(complex long double Z) -> complex
function _FloatN ctanhfN(complex _FloatN Z) -> complex
function _FloatNx ctanhfNx(complex _FloatNx Z) -> complex
function asinh(double X) -> double
function asinhf(float X) -> float
function double asinhl(long double X) -> long
function asinhfN(_FloatN X) -> _FloatN
function asinhfNx(_FloatNx X) -> _FloatNx
function acosh(double X) -> double
function acoshf(float X) -> float
function double acoshl(long double X) -> long
function acoshfN(_FloatN X) -> _FloatN
function acoshfNx(_FloatNx X) -> _FloatNx
function atanh(double X) -> double
function atanhf(float X) -> float
function double atanhl(long double X) -> long
function atanhfN(_FloatN X) -> _FloatN
function atanhfNx(_FloatNx X) -> _FloatNx
function double casinh(complex double Z) -> complex
function float casinhf(complex float Z) -> complex
function long double casinhl(complex long double Z) -> complex
function _FloatN casinhfN(complex _FloatN Z) -> complex
function _FloatNx casinhfNx(complex _FloatNx Z) -> complex
function double cacosh(complex double Z) -> complex
function float cacoshf(complex float Z) -> complex
function long double cacoshl(complex long double Z) -> complex
function _FloatN cacoshfN(complex _FloatN Z) -> complex
function _FloatNx cacoshfNx(complex _FloatNx Z) -> complex
function double catanh(complex double Z) -> complex
function float catanhf(complex float Z) -> complex
function long double catanhl(complex long double Z) -> complex
function _FloatN catanhfN(complex _FloatN Z) -> complex
function _FloatNx catanhfNx(complex _FloatNx Z) -> complex
function erf(double X) -> double
function erff(float X) -> float
function double erfl(long double X) -> long
function erffN(_FloatN X) -> _FloatN
function erffNx(_FloatNx X) -> _FloatNx
function erfc(double X) -> double
function erfcf(float X) -> float
function double erfcl(long double X) -> long
function erfcfN(_FloatN X) -> _FloatN
function erfcfNx(_FloatNx X) -> _FloatNx
function lgamma(double X) -> double
function lgammaf(float X) -> float
function double lgammal(long double X) -> long
function lgammafN(_FloatN X) -> _FloatN
function lgammafNx(_FloatNx X) -> _FloatNx
function lgamma_r(double X, int* SIGNP) -> double
function lgammaf_r(float X, int* SIGNP) -> float
function double lgammal_r(long double X, int* SIGNP) -> long
function lgammafN_r(_FloatN X, int* SIGNP) -> _FloatN
function lgammafNx_r(_FloatNx X, int* SIGNP) -> _FloatNx
function gamma(double X) -> double
function gammaf(float X) -> float
function double gammal(long double X) -> long
function tgamma(double X) -> double
function tgammaf(float X) -> float
function double tgammal(long double X) -> long
function tgammafN(_FloatN X) -> _FloatN
function tgammafNx(_FloatNx X) -> _FloatNx
function j0(double X) -> double
function j0f(float X) -> float
function double j0l(long double X) -> long
function j0fN(_FloatN X) -> _FloatN
function j0fNx(_FloatNx X) -> _FloatNx
function j1(double X) -> double
function j1f(float X) -> float
function double j1l(long double X) -> long
function j1fN(_FloatN X) -> _FloatN
function j1fNx(_FloatNx X) -> _FloatNx
function jn(int N, double X) -> double
function jnf(int N, float X) -> float
function double jnl(int N, long double X) -> long
function jnfN(int N, _FloatN X) -> _FloatN
function jnfNx(int N, _FloatNx X) -> _FloatNx
function y0(double X) -> double
function y0f(float X) -> float
function double y0l(long double X) -> long
function y0fN(_FloatN X) -> _FloatN
function y0fNx(_FloatNx X) -> _FloatNx
function y1(double X) -> double
function y1f(float X) -> float
function double y1l(long double X) -> long
function y1fN(_FloatN X) -> _FloatN
function y1fNx(_FloatNx X) -> _FloatNx
function yn(int N, double X) -> double
function ynf(int N, float X) -> float
function double ynl(int N, long double X) -> long
function ynfN(int N, _FloatN X) -> _FloatN
function ynfNx(int N, _FloatNx X) -> _FloatNx
function rand(void) -> int
function srand(unsigned int SEED) -> void
function rand_r(unsigned int* SEED) -> int
function int random(void) -> long
function srandom(unsigned int SEED) -> void
function initstate(unsigned int SEED, char* STATE, size_t -> char*
function setstate(char* STATE) -> char*
function random_r(struct random_data* restrict BUF, int32_t -> int
function srandom_r(unsigned int SEED, struct random_data* BUF) -> int
function initstate_r(unsigned int SEED, char* restrict -> int
function setstate_r(char* restrict STATEBUF, struct -> int
function drand48(void) -> double
function erand48(unsigned short int XSUBI[3]) -> double
function int lrand48(void) -> long
function int nrand48(unsigned short int XSUBI[3]) -> long
function int mrand48(void) -> long
function int jrand48(unsigned short int XSUBI[3]) -> long
function srand48(long int SEEDVAL) -> void
function short int* seed48(unsigned short int -> unsigned
function lcong48(unsigned short int PARAM[7]) -> void
function drand48_r(struct drand48_data* BUFFER, double -> int
function erand48_r(unsigned short int XSUBI[3], struct -> int
function lrand48_r(struct drand48_data* BUFFER, long int -> int
function nrand48_r(unsigned short int XSUBI[3], struct -> int
function mrand48_r(struct drand48_data* BUFFER, long int -> int
function jrand48_r(unsigned short int XSUBI[3], struct -> int
function srand48_r(long int SEEDVAL, struct drand48_data -> int
function seed48_r(unsigned short int SEED16V[3], struct -> int
function lcong48_r(unsigned short int PARAM[7], struct -> int
function div(int NUMERATOR, int DENOMINATOR) -> div_t
function ldiv(long int NUMERATOR, long int DENOMINATOR) -> ldiv_t
function lldiv(long long int NUMERATOR, long long int -> lldiv_t
function imaxdiv(intmax_t NUMERATOR, intmax_t -> imaxdiv_t
function isinf(double X) -> int
function isinff(float X) -> int
function isinfl(long double X) -> int
function isnan(double X) -> int
function isnanf(float X) -> int
function isnanl(long double X) -> int
function finite(double X) -> int
function finitef(float X) -> int
function finitel(long double X) -> int
function feclearexcept(int EXCEPTS) -> int
function feraiseexcept(int EXCEPTS) -> int
function fesetexcept(int EXCEPTS) -> int
function fetestexcept(int EXCEPTS) -> int
function fegetexceptflag(fexcept_t* FLAGP, int EXCEPTS) -> int
function fesetexceptflag(const fexcept_t* FLAGP, int EXCEPTS) -> int
function fetestexceptflag(const fexcept_t* FLAGP, int EXCEPTS) -> int
function fegetround(void) -> int
function fesetround(int ROUND) -> int
function fegetenv(fenv_t* ENVP) -> int
function feholdexcept(fenv_t* ENVP) -> int
function fesetenv(const fenv_t* ENVP) -> int
function feupdateenv(const fenv_t* ENVP) -> int
function fegetmode(femode_t* MODEP) -> int
function fesetmode(const femode_t* MODEP) -> int
function feenableexcept(int EXCEPTS) -> int
function fedisableexcept(int EXCEPTS) -> int
function fegetexcept(void) -> int
function abs(int NUMBER) -> int
function int labs(long int NUMBER) -> long
function long int llabs(long long int NUMBER) -> long
function imaxabs(intmax_t NUMBER) -> intmax_t
function fabs(double NUMBER) -> double
function fabsf(float NUMBER) -> float
function double fabsl(long double NUMBER) -> long
function fabsfN(_FloatN NUMBER) -> _FloatN
function fabsfNx(_FloatNx NUMBER) -> _FloatNx
function cabs(complex double Z) -> double
function cabsf(complex float Z) -> float
function double cabsl(complex long double Z) -> long
function cabsfN(complex _FloatN Z) -> _FloatN
function cabsfNx(complex _FloatNx Z) -> _FloatNx
function frexp(double VALUE, int* EXPONENT) -> double
function frexpf(float VALUE, int* EXPONENT) -> float
function double frexpl(long double VALUE, int* EXPONENT) -> long
function frexpfN(_FloatN VALUE, int* EXPONENT) -> _FloatN
function frexpfNx(_FloatNx VALUE, int* EXPONENT) -> _FloatNx
function ldexp(double VALUE, int EXPONENT) -> double
function ldexpf(float VALUE, int EXPONENT) -> float
function double ldexpl(long double VALUE, int EXPONENT) -> long
function ldexpfN(_FloatN VALUE, int EXPONENT) -> _FloatN
function ldexpfNx(_FloatNx VALUE, int EXPONENT) -> _FloatNx
function scalb(double VALUE, double EXPONENT) -> double
function scalbf(float VALUE, float EXPONENT) -> float
function double scalbl(long double VALUE, long double -> long
function scalbn(double X, int N) -> double
function scalbnf(float X, int N) -> float
function double scalbnl(long double X, int N) -> long
function scalbnfN(_FloatN X, int N) -> _FloatN
function scalbnfNx(_FloatNx X, int N) -> _FloatNx
function scalbln(double X, long int N) -> double
function scalblnf(float X, long int N) -> float
function double scalblnl(long double X, long int N) -> long
function scalblnfN(_FloatN X, long int N) -> _FloatN
function scalblnfNx(_FloatNx X, long int N) -> _FloatNx
function significand(double X) -> double
function significandf(float X) -> float
function double significandl(long double X) -> long
function ceil(double X) -> double
function ceilf(float X) -> float
function double ceill(long double X) -> long
function ceilfN(_FloatN X) -> _FloatN
function ceilfNx(_FloatNx X) -> _FloatNx
function floor(double X) -> double
function floorf(float X) -> float
function double floorl(long double X) -> long
function floorfN(_FloatN X) -> _FloatN
function floorfNx(_FloatNx X) -> _FloatNx
function trunc(double X) -> double
function truncf(float X) -> float
function double truncl(long double X) -> long
function truncfN(_FloatN X) -> _FloatN
function truncfNx(_FloatNx X) -> _FloatNx
function rint(double X) -> double
function rintf(float X) -> float
function double rintl(long double X) -> long
function rintfN(_FloatN X) -> _FloatN
function rintfNx(_FloatNx X) -> _FloatNx
function nearbyint(double X) -> double
function nearbyintf(float X) -> float
function double nearbyintl(long double X) -> long
function nearbyintfN(_FloatN X) -> _FloatN
function nearbyintfNx(_FloatNx X) -> _FloatNx
function round(double X) -> double
function roundf(float X) -> float
function double roundl(long double X) -> long
function roundfN(_FloatN X) -> _FloatN
function roundfNx(_FloatNx X) -> _FloatNx
function roundeven(double X) -> double
function roundevenf(float X) -> float
function double roundevenl(long double X) -> long
function roundevenfN(_FloatN X) -> _FloatN
function roundevenfNx(_FloatNx X) -> _FloatNx
function int lrint(double X) -> long
function int lrintf(float X) -> long
function int lrintl(long double X) -> long
function int lrintfN(_FloatN X) -> long
function int lrintfNx(_FloatNx X) -> long
function long int llrint(double X) -> long
function long int llrintf(float X) -> long
function long int llrintl(long double X) -> long
function long int llrintfN(_FloatN X) -> long
function long int llrintfNx(_FloatNx X) -> long
function int lround(double X) -> long
function int lroundf(float X) -> long
function int lroundl(long double X) -> long
function int lroundfN(_FloatN X) -> long
function int lroundfNx(_FloatNx X) -> long
function long int llround(double X) -> long
function long int llroundf(float X) -> long
function long int llroundl(long double X) -> long
function long int llroundfN(_FloatN X) -> long
function long int llroundfNx(_FloatNx X) -> long
function fromfp(double X, int ROUND, unsigned int WIDTH) -> intmax_t
function fromfpf(float X, int ROUND, unsigned int WIDTH) -> intmax_t
function fromfpl(long double X, int ROUND, unsigned int -> intmax_t
function fromfpfN(_FloatN X, int ROUND, unsigned int -> intmax_t
function fromfpfNx(_FloatNx X, int ROUND, unsigned int -> intmax_t
function ufromfp(double X, int ROUND, unsigned int -> uintmax_t
function ufromfpf(float X, int ROUND, unsigned int -> uintmax_t
function ufromfpl(long double X, int ROUND, unsigned int -> uintmax_t
function ufromfpfN(_FloatN X, int ROUND, unsigned int -> uintmax_t
function ufromfpfNx(_FloatNx X, int ROUND, unsigned int -> uintmax_t
function fromfpx(double X, int ROUND, unsigned int WIDTH) -> intmax_t
function fromfpxf(float X, int ROUND, unsigned int WIDTH) -> intmax_t
function fromfpxl(long double X, int ROUND, unsigned int -> intmax_t
function fromfpxfN(_FloatN X, int ROUND, unsigned int -> intmax_t
function fromfpxfNx(_FloatNx X, int ROUND, unsigned int -> intmax_t
function ufromfpx(double X, int ROUND, unsigned int -> uintmax_t
function ufromfpxf(float X, int ROUND, unsigned int -> uintmax_t
function ufromfpxl(long double X, int ROUND, unsigned -> uintmax_t
function ufromfpxfN(_FloatN X, int ROUND, unsigned int -> uintmax_t
function ufromfpxfNx(_FloatNx X, int ROUND, unsigned int -> uintmax_t
function modf(double VALUE, double* INTEGER-PART) -> double
function modff(float VALUE, float* INTEGER-PART) -> float
function double modfl(long double VALUE, long double -> long
function modffN(_FloatN VALUE, _FloatN* INTEGER-PART) -> _FloatN
function modffNx(_FloatNx VALUE, _FloatNx* INTEGER-PART) -> _FloatNx
function fmod(double NUMERATOR, double DENOMINATOR) -> double
function fmodf(float NUMERATOR, float DENOMINATOR) -> float
function double fmodl(long double NUMERATOR, long double -> long
function fmodfN(_FloatN NUMERATOR, _FloatN DENOMINATOR) -> _FloatN
function fmodfNx(_FloatNx NUMERATOR, _FloatNx -> _FloatNx
function remainder(double NUMERATOR, double DENOMINATOR) -> double
function remainderf(float NUMERATOR, float DENOMINATOR) -> float
function double remainderl(long double NUMERATOR, long double -> long
function remainderfN(_FloatN NUMERATOR, _FloatN -> _FloatN
function remainderfNx(_FloatNx NUMERATOR, _FloatNx -> _FloatNx
function drem(double NUMERATOR, double DENOMINATOR) -> double
function dremf(float NUMERATOR, float DENOMINATOR) -> float
function double dreml(long double NUMERATOR, long double -> long
function copysign(double X, double Y) -> double
function copysignf(float X, float Y) -> float
function double copysignl(long double X, long double Y) -> long
function copysignfN(_FloatN X, _FloatN Y) -> _FloatN
function copysignfNx(_FloatNx X, _FloatNx Y) -> _FloatNx
function signbit(_float-type_ X) -> int
function nextafter(double X, double Y) -> double
function nextafterf(float X, float Y) -> float
function double nextafterl(long double X, long double Y) -> long
function nextafterfN(_FloatN X, _FloatN Y) -> _FloatN
function nextafterfNx(_FloatNx X, _FloatNx Y) -> _FloatNx
function nexttoward(double X, long double Y) -> double
function nexttowardf(float X, long double Y) -> float
function double nexttowardl(long double X, long double Y) -> long
function nextup(double X) -> double
function nextupf(float X) -> float
function double nextupl(long double X) -> long
function nextupfN(_FloatN X) -> _FloatN
function nextupfNx(_FloatNx X) -> _FloatNx
function nextdown(double X) -> double
function nextdownf(float X) -> float
function double nextdownl(long double X) -> long
function nextdownfN(_FloatN X) -> _FloatN
function nextdownfNx(_FloatNx X) -> _FloatNx
function nan(const char* TAGP) -> double
function nanf(const char* TAGP) -> float
function double nanl(const char* TAGP) -> long
function nanfN(const char* TAGP) -> _FloatN
function nanfNx(const char* TAGP) -> _FloatNx
function canonicalize(double* CX, const double* X) -> int
function canonicalizef(float* CX, const float* X) -> int
function canonicalizel(long double* CX, const long double* X) -> int
function canonicalizefN(_FloatN* CX, const _FloatN* X) -> int
function canonicalizefNx(_FloatNx* CX, const _FloatNx* X) -> int
function getpayload(const double* X) -> double
function getpayloadf(const float* X) -> float
function double getpayloadl(const long double* X) -> long
function getpayloadfN(const _FloatN* X) -> _FloatN
function getpayloadfNx(const _FloatNx* X) -> _FloatNx
function setpayload(double* X, double PAYLOAD) -> int
function setpayloadf(float* X, float PAYLOAD) -> int
function setpayloadl(long double* X, long double PAYLOAD) -> int
function setpayloadfN(_FloatN* X, _FloatN PAYLOAD) -> int
function setpayloadfNx(_FloatNx* X, _FloatNx PAYLOAD) -> int
function setpayloadsig(double* X, double PAYLOAD) -> int
function setpayloadsigf(float* X, float PAYLOAD) -> int
function setpayloadsigl(long double* X, long double PAYLOAD) -> int
function setpayloadsigfN(_FloatN* X, _FloatN PAYLOAD) -> int
function setpayloadsigfNx(_FloatNx* X, _FloatNx PAYLOAD) -> int
function totalorder(double X, double Y) -> int
function totalorderf(float X, float Y) -> int
function totalorderl(long double X, long double Y) -> int
function totalorderfN(_FloatN X, _FloatN Y) -> int
function totalorderfNx(_FloatNx X, _FloatNx Y) -> int
function totalordermag(double X, double Y) -> int
function totalordermagf(float X, float Y) -> int
function totalordermagl(long double X, long double Y) -> int
function totalordermagfN(_FloatN X, _FloatN Y) -> int
function totalordermagfNx(_FloatNx X, _FloatNx Y) -> int
function fmin(double X, double Y) -> double
function fminf(float X, float Y) -> float
function double fminl(long double X, long double Y) -> long
function fminfN(_FloatN X, _FloatN Y) -> _FloatN
function fminfNx(_FloatNx X, _FloatNx Y) -> _FloatNx
function fmax(double X, double Y) -> double
function fmaxf(float X, float Y) -> float
function double fmaxl(long double X, long double Y) -> long
function fmaxfN(_FloatN X, _FloatN Y) -> _FloatN
function fmaxfNx(_FloatNx X, _FloatNx Y) -> _FloatNx
function fminmag(double X, double Y) -> double
function fminmagf(float X, float Y) -> float
function double fminmagl(long double X, long double Y) -> long
function fminmagfN(_FloatN X, _FloatN Y) -> _FloatN
function fminmagfNx(_FloatNx X, _FloatNx Y) -> _FloatNx
function fmaxmag(double X, double Y) -> double
function fmaxmagf(float X, float Y) -> float
function double fmaxmagl(long double X, long double Y) -> long
function fmaxmagfN(_FloatN X, _FloatN Y) -> _FloatN
function fmaxmagfNx(_FloatNx X, _FloatNx Y) -> _FloatNx
function fdim(double X, double Y) -> double
function fdimf(float X, float Y) -> float
function double fdiml(long double X, long double Y) -> long
function fdimfN(_FloatN X, _FloatN Y) -> _FloatN
function fdimfNx(_FloatNx X, _FloatNx Y) -> _FloatNx
function fma(double X, double Y, double Z) -> double
function fmaf(float X, float Y, float Z) -> float
function double fmal(long double X, long double Y, long -> long
function fmafN(_FloatN X, _FloatN Y, _FloatN Z) -> _FloatN
function fmafNx(_FloatNx X, _FloatNx Y, _FloatNx Z) -> _FloatNx
function fadd(double X, double Y) -> float
function faddl(long double X, long double Y) -> float
function daddl(long double X, long double Y) -> double
function fMaddfN(_FloatN X, _FloatN Y) -> _FloatM
function fMaddfNx(_FloatNx X, _FloatNx Y) -> _FloatM
function fMxaddfN(_FloatN X, _FloatN Y) -> _FloatMx
function fMxaddfNx(_FloatNx X, _FloatNx Y) -> _FloatMx
function fsub(double X, double Y) -> float
function fsubl(long double X, long double Y) -> float
function dsubl(long double X, long double Y) -> double
function fMsubfN(_FloatN X, _FloatN Y) -> _FloatM
function fMsubfNx(_FloatNx X, _FloatNx Y) -> _FloatM
function fMxsubfN(_FloatN X, _FloatN Y) -> _FloatMx
function fMxsubfNx(_FloatNx X, _FloatNx Y) -> _FloatMx
function fmul(double X, double Y) -> float
function fmull(long double X, long double Y) -> float
function dmull(long double X, long double Y) -> double
function fMmulfN(_FloatN X, _FloatN Y) -> _FloatM
function fMmulfNx(_FloatNx X, _FloatNx Y) -> _FloatM
function fMxmulfN(_FloatN X, _FloatN Y) -> _FloatMx
function fMxmulfNx(_FloatNx X, _FloatNx Y) -> _FloatMx
function fdiv(double X, double Y) -> float
function fdivl(long double X, long double Y) -> float
function ddivl(long double X, long double Y) -> double
function fMdivfN(_FloatN X, _FloatN Y) -> _FloatM
function fMdivfNx(_FloatNx X, _FloatNx Y) -> _FloatM
function fMxdivfN(_FloatN X, _FloatN Y) -> _FloatMx
function fMxdivfNx(_FloatNx X, _FloatNx Y) -> _FloatMx
function creal(complex double Z) -> double
function crealf(complex float Z) -> float
function double creall(complex long double Z) -> long
function crealfN(complex _FloatN Z) -> _FloatN
function crealfNx(complex _FloatNx Z) -> _FloatNx
function cimag(complex double Z) -> double
function cimagf(complex float Z) -> float
function double cimagl(complex long double Z) -> long
function cimagfN(complex _FloatN Z) -> _FloatN
function cimagfNx(complex _FloatNx Z) -> _FloatNx
function double conj(complex double Z) -> complex
function float conjf(complex float Z) -> complex
function long double conjl(complex long double Z) -> complex
function _FloatN conjfN(complex _FloatN Z) -> complex
function _FloatNx conjfNx(complex _FloatNx Z) -> complex
function carg(complex double Z) -> double
function cargf(complex float Z) -> float
function double cargl(complex long double Z) -> long
function cargfN(complex _FloatN Z) -> _FloatN
function cargfNx(complex _FloatNx Z) -> _FloatNx
function double cproj(complex double Z) -> complex
function float cprojf(complex float Z) -> complex
function long double cprojl(complex long double Z) -> complex
function _FloatN cprojfN(complex _FloatN Z) -> complex
function _FloatNx cprojfNx(complex _FloatNx Z) -> complex
function int strtol(const char* restrict STRING, char -> long
function int wcstol(const wchar_t* restrict STRING, wchar_t -> long
function long int strtoul(const char* restrict STRING, -> unsigned
function long int wcstoul(const wchar_t* restrict STRING, -> unsigned
function long int strtoll(const char* restrict STRING, char -> long
function long int wcstoll(const wchar_t* restrict STRING, -> long
function long int strtoq(const char* restrict STRING, char -> long
function long int wcstoq(const wchar_t* restrict STRING, -> long
function long long int strtoull(const char* restrict -> unsigned
function long long int wcstoull(const wchar_t* restrict -> unsigned
function long long int strtouq(const char* restrict -> unsigned
function long long int wcstouq(const wchar_t* restrict -> unsigned
function strtoimax(const char* restrict STRING, char -> intmax_t
function wcstoimax(const wchar_t* restrict STRING, -> intmax_t
function strtoumax(const char* restrict STRING, char -> uintmax_t
function wcstoumax(const wchar_t* restrict STRING, -> uintmax_t
function int atol(const char* STRING) -> long
function atoi(const char* STRING) -> int
function long int atoll(const char* STRING) -> long
function strtod(const char* restrict STRING, char -> double
function strtof(const char* STRING, char** TAILPTR) -> float
function double strtold(const char* STRING, char** TAILPTR) -> long
function strtofN(const char* STRING, char** TAILPTR) -> _FloatN
function strtofNx(const char* STRING, char** TAILPTR) -> _FloatNx
function wcstod(const wchar_t* restrict STRING, wchar_t -> double
function wcstof(const wchar_t* STRING, wchar_t** TAILPTR) -> float
function double wcstold(const wchar_t* STRING, wchar_t -> long
function wcstofN(const wchar_t* STRING, wchar_t** TAILPTR) -> _FloatN
function wcstofNx(const wchar_t* STRING, wchar_t -> _FloatNx
function atof(const char* STRING) -> double
function strfromd(char* restrict STRING, size_t SIZE, const -> int
function strfromf(char* restrict STRING, size_t SIZE, const -> int
function strfroml(char* restrict STRING, size_t SIZE, const -> int
function strfromfN(char* restrict STRING, size_t SIZE, const -> int
function strfromfNx(char* restrict STRING, size_t SIZE, const -> int
function ecvt(double VALUE, int NDIGIT, int* DECPT, int -> char*
function fcvt(double VALUE, int NDIGIT, int* DECPT, int -> char*
function gcvt(double VALUE, int NDIGIT, char* BUF) -> char*
function qecvt(long double VALUE, int NDIGIT, int* DECPT, -> char*
function qfcvt(long double VALUE, int NDIGIT, int* DECPT, -> char*
function qgcvt(long double VALUE, int NDIGIT, char* BUF) -> char*
function ecvt_r(double VALUE, int NDIGIT, int* DECPT, int -> int
function fcvt_r(double VALUE, int NDIGIT, int* DECPT, int -> int
function qecvt_r(long double VALUE, int NDIGIT, int* DECPT, -> int
function qfcvt_r(long double VALUE, int NDIGIT, int* DECPT, -> int
function difftime(time_t TIME1, time_t TIME0) -> double
function clock(void) -> clock_t
function times(struct tms* BUFFER) -> clock_t
function time(time_t* RESULT) -> time_t
function stime(const time_t* NEWTIME) -> int
function gettimeofday(struct timeval* TP, struct timezone -> int
function settimeofday(const struct timeval* TP, const struct -> int
function adjtime(const struct timeval* DELTA, struct timeval -> int
function adjtimex(struct timex* TIMEX) -> int
function tm* localtime(const time_t* TIME) -> struct
function tm* localtime_r(const time_t* TIME, struct tm -> struct
function tm* gmtime(const time_t* TIME) -> struct
function tm* gmtime_r(const time_t* TIME, struct tm -> struct
function mktime(struct tm* BROKENTIME) -> time_t
function timelocal(struct tm* BROKENTIME) -> time_t
function timegm(struct tm* BROKENTIME) -> time_t
function ntp_gettime(struct ntptimeval* TPTR) -> int
function ntp_adjtime(struct timex* TPTR) -> int
function asctime(const struct tm* BROKENTIME) -> char*
function asctime_r(const struct tm* BROKENTIME, char -> char*
function ctime(const time_t* TIME) -> char*
function ctime_r(const time_t* TIME, char* BUFFER) -> char*
function strftime(char* S, size_t SIZE, const char -> size_t
function wcsftime(wchar_t* S, size_t SIZE, const wchar_t -> size_t
function strptime(const char* S, const char* FMT, struct tm -> char*
function tm* getdate(const char* STRING) -> struct
function getdate_r(const char* STRING, struct tm* TP) -> int
function tzset(void) -> void
function setitimer(int WHICH, const struct itimerval* NEW, -> int
function getitimer(int WHICH, struct itimerval* OLD) -> int
function int alarm(unsigned int SECONDS) -> unsigned
function int sleep(unsigned int SECONDS) -> unsigned
function nanosleep(const struct timespec* REQUESTED_TIME, -> int
function getrusage(int PROCESSES, struct rusage* RUSAGE) -> int
function vtimes(struct vtimes* CURRENT, struct vtimes* CHILD) -> int
function getrlimit(int RESOURCE, struct rlimit* RLP) -> int
function getrlimit64(int RESOURCE, struct rlimit64* RLP) -> int
function setrlimit(int RESOURCE, const struct rlimit* RLP) -> int
function setrlimit64(int RESOURCE, const struct rlimit64* RLP) -> int
function int ulimit(int CMD, ...) -> long
function vlimit(int RESOURCE, int LIMIT) -> int
function sched_setscheduler(pid_t PID, int POLICY, const -> int
function sched_getscheduler(pid_t PID) -> int
function sched_setparam(pid_t PID, const struct sched_param -> int
function sched_getparam(pid_t PID, struct sched_param* PARAM) -> int
function sched_get_priority_min(int POLICY) -> int
function sched_get_priority_max(int POLICY) -> int
function sched_rr_get_interval(pid_t PID, struct timespec -> int
function sched_yield(void) -> int
function getpriority(int CLASS, int ID) -> int
function setpriority(int CLASS, int ID, int NICEVAL) -> int
function nice(int INCREMENT) -> int
function sched_getaffinity(pid_t PID, size_t CPUSETSIZE, -> int
function sched_setaffinity(pid_t PID, size_t CPUSETSIZE, const -> int
function getpagesize(void) -> int
function int get_phys_pages(void) -> long
function int get_avphys_pages(void) -> long
function get_nprocs_conf(void) -> int
function get_nprocs(void) -> int
function getloadavg(double LOADAVG[], int NELEM) -> int
function longjmp(jmp_buf STATE, int VALUE) -> void
function sigsetjmp(sigjmp_buf STATE, int SAVESIGS) -> int
function siglongjmp(sigjmp_buf STATE, int VALUE) -> void
function getcontext(ucontext_t* UCP) -> int
function makecontext(ucontext_t* UCP, void(*FUNC)(void), -> void
function setcontext(const ucontext_t* UCP) -> int
function swapcontext(ucontext_t* restrict OUCP, const -> int
function strsignal(int SIGNUM) -> char*
function psignal(int SIGNUM, const char* MESSAGE) -> void
function signal(int SIGNUM, sighandler_t ACTION) -> sighandler_t
function sysv_signal(int SIGNUM, sighandler_t ACTION) -> sighandler_t
function ssignal(int SIGNUM, sighandler_t ACTION) -> sighandler_t
function sigaction(int SIGNUM, const struct sigaction -> int
function raise(int SIGNUM) -> int
function gsignal(int SIGNUM) -> int
function kill(pid_t PID, int SIGNUM) -> int
function killpg(int PGID, int SIGNUM) -> int
function sigemptyset(sigset_t* SET) -> int
function sigfillset(sigset_t* SET) -> int
function sigaddset(sigset_t* SET, int SIGNUM) -> int
function sigdelset(sigset_t* SET, int SIGNUM) -> int
function sigismember(const sigset_t* SET, int SIGNUM) -> int
function sigprocmask(int HOW, const sigset_t* restrict SET, -> int
function sigpending(sigset_t* SET) -> int
function pause(void) -> int
function sigsuspend(const sigset_t* SET) -> int
function sigaltstack(const stack_t* restrict STACK, stack_t -> int
function sigstack(struct sigstack* STACK, struct sigstack -> int
function siginterrupt(int SIGNUM, int FAILFLAG) -> int
function sigblock(int MASK) -> int
function sigsetmask(int MASK) -> int
function sigpause(int MASK) -> int
function getopt(int ARGC, const* char* ARGV, const char -> int
function getopt_long(int ARGC, const* char* ARGV, const char -> int
function getopt_long_only(int ARGC, const* char* ARGV, const -> int
function argp_parse(const struct argp* ARGP, int ARGC, -> error_t
function argp_usage(const struct argp_state* STATE) -> void
function argp_error(const struct argp_state* STATE, const -> void
function argp_failure(const struct argp_state* STATE, int -> void
function argp_state_help(const struct argp_state* STATE, FILE -> void
function argp_help(const struct argp* ARGP, FILE* STREAM, -> void
function getsubopt(char** OPTIONP, const* char* TOKENS, char -> int
function getenv(const char* NAME) -> char*
function secure_getenv(const char* NAME) -> char*
function putenv(char* STRING) -> int
function setenv(const char* NAME, const char* VALUE, int -> int
function unsetenv(const char* NAME) -> int
function clearenv(void) -> int
function long int getauxval(unsigned long int TYPE) -> unsigned
function int syscall(long int SYSNO, ...) -> long
function exit(int STATUS) -> void
function atexit(void(*FUNCTION)(void)) -> int
function on_exit(void(*FUNCTION)(int STATUS, void* ARG), void -> int
function abort(void) -> void
function _exit(int STATUS) -> void
function _Exit(int STATUS) -> void
function system(const char* COMMAND) -> int
function getpid(void) -> pid_t
function getppid(void) -> pid_t
function fork(void) -> pid_t
function vfork(void) -> pid_t
function execv(const char* FILENAME, const* char ARGV[]) -> int
function execl(const char* FILENAME, const char* ARG0, ...) -> int
function execve(const char* FILENAME, const* char ARGV[], char -> int
function execle(const char* FILENAME, const char* ARG0, ..., -> int
function execvp(const char* FILENAME, const* char ARGV[]) -> int
function execlp(const char* FILENAME, const char* ARG0, ...) -> int
function waitpid(pid_t PID, int* STATUS-PTR, int OPTIONS) -> pid_t
function wait(int* STATUS-PTR) -> pid_t
function wait4(pid_t PID, int* STATUS-PTR, int OPTIONS, -> pid_t
function wait3(int* STATUS-PTR, int OPTIONS, struct rusage -> pid_t
function semctl(int SEMID, int SEMNUM, int CMD); -> int
function semget(key_t KEY, int NSEMS, int SEMFLG); -> int
function semop(int SEMID, struct sembuf* SOPS, size_t NSOPS); -> int
function semtimedop(int SEMID, struct sembuf* SOPS, size_t -> int
function sem_init(sem_t* SEM, int PSHARED, unsigned int -> int
function sem_destroy(sem_t* SEM); -> int
function sem_open(const char* NAME, int OFLAG, ...); -> sem_t*
function sem_close(sem_t* SEM); -> int
function sem_unlink(const char* NAME); -> int
function sem_wait(sem_t* SEM); -> int
function sem_timedwait(sem_t* SEM, const struct timespec -> int
function sem_trywait(sem_t* SEM); -> int
function sem_post(sem_t* SEM); -> int
function sem_getvalue(sem_t* SEM, int* SVAL); -> int
function ctermid(char* STRING) -> char*
function setsid(void) -> pid_t
function getsid(pid_t PID) -> pid_t
function getpgrp(void) -> pid_t
function getpgid(pid_t PID) -> int
function setpgid(pid_t PID, pid_t PGID) -> int
function setpgrp(pid_t PID, pid_t PGID) -> int
function tcgetpgrp(int FILEDES) -> pid_t
function tcsetpgrp(int FILEDES, pid_t PGID) -> int
function tcgetsid(int FILDES) -> pid_t
function getuid(void) -> uid_t
function getgid(void) -> gid_t
function geteuid(void) -> uid_t
function getegid(void) -> gid_t
function getgroups(int COUNT, gid_t* GROUPS) -> int
function seteuid(uid_t NEWEUID) -> int
function setuid(uid_t NEWUID) -> int
function setreuid(uid_t RUID, uid_t EUID) -> int
function setegid(gid_t NEWGID) -> int
function setgid(gid_t NEWGID) -> int
function setregid(gid_t RGID, gid_t EGID) -> int
function setgroups(size_t COUNT, const gid_t* GROUPS) -> int
function initgroups(const char* USER, gid_t GROUP) -> int
function getgrouplist(const char* USER, gid_t GROUP, gid_t -> int
function getlogin(void) -> char*
function cuserid(char* STRING) -> char*
function setutent(void) -> void
function utmp* getutent(void) -> struct
function endutent(void) -> void
function utmp* getutid(const struct utmp* ID) -> struct
function utmp* getutline(const struct utmp* LINE) -> struct
function utmp* pututline(const struct utmp* UTMP) -> struct
function getutent_r(struct utmp* BUFFER, struct utmp* *RESULT) -> int
function getutid_r(const struct utmp* ID, struct utmp* BUFFER, -> int
function getutline_r(const struct utmp* LINE, struct utmp -> int
function utmpname(const char* FILE) -> int
function updwtmp(const char* WTMP_FILE, const struct utmp -> void
function setutxent(void) -> void
function utmpx* getutxent(void) -> struct
function endutxent(void) -> void
function utmpx* getutxid(const struct utmpx* ID) -> struct
function utmpx* getutxline(const struct utmpx* LINE) -> struct
function utmpx* pututxline(const struct utmpx* UTMP) -> struct
function utmpxname(const char* FILE) -> int
function getutmp(const struct utmpx* UTMPX, struct utmp* UTMP) -> int
function getutmpx(const struct utmp* UTMP, struct utmpx -> int
function login_tty(int FILEDES) -> int
function login(const struct utmp* ENTRY) -> void
function logout(const char* UT_LINE) -> int
function logwtmp(const char* UT_LINE, const char* UT_NAME, -> void
function passwd* getpwuid(uid_t UID) -> struct
function getpwuid_r(uid_t UID, struct passwd* RESULT_BUF, char -> int
function passwd* getpwnam(const char* NAME) -> struct
function getpwnam_r(const char* NAME, struct passwd -> int
function passwd* fgetpwent(FILE* STREAM) -> struct
function fgetpwent_r(FILE* STREAM, struct passwd* RESULT_BUF, -> int
function setpwent(void) -> void
function passwd* getpwent(void) -> struct
function getpwent_r(struct passwd* RESULT_BUF, char* BUFFER, -> int
function endpwent(void) -> void
function putpwent(const struct passwd* P, FILE* STREAM) -> int
function group* getgrgid(gid_t GID) -> struct
function getgrgid_r(gid_t GID, struct group* RESULT_BUF, char -> int
function group* getgrnam(const char* NAME) -> struct
function getgrnam_r(const char* NAME, struct group -> int
function group* fgetgrent(FILE* STREAM) -> struct
function fgetgrent_r(FILE* STREAM, struct group* RESULT_BUF, -> int
function setgrent(void) -> void
function group* getgrent(void) -> struct
function getgrent_r(struct group* RESULT_BUF, char* BUFFER, -> int
function endgrent(void) -> void
function setnetgrent(const char* NETGROUP) -> int
function getnetgrent(char** HOSTP, char** USERP, char -> int
function getnetgrent_r(char** HOSTP, char** USERP, char -> int
function endnetgrent(void) -> void
function innetgr(const char* NETGROUP, const char* HOST, const -> int
function gethostname(char* NAME, size_t SIZE) -> int
function sethostname(const char* NAME, size_t LENGTH) -> int
function getdomainnname(char* NAME, size_t LENGTH) -> int
function setdomainname(const char* NAME, size_t LENGTH) -> int
function int gethostid(void) -> long
function sethostid(long int ID) -> int
function uname(struct utsname* INFO) -> int
function setfsent(void) -> int
function endfsent(void) -> void
function fstab* getfsent(void) -> struct
function fstab* getfsspec(const char* NAME) -> struct
function fstab* getfsfile(const char* NAME) -> struct
function setmntent(const char* FILE, const char* MODE) -> FILE*
function endmntent(FILE* STREAM) -> int
function mntent* getmntent(FILE* STREAM) -> struct
function mntent* getmntent_r(FILE* STREAM, struct mntent -> struct
function addmntent(FILE* STREAM, const struct mntent* MNT) -> int
function hasmntopt(const struct mntent* MNT, const char -> char*
function mount(const char* SPECIAL_FILE, const char* DIR, -> int
function umount2(const char* FILE, int FLAGS) -> int
function umount(const char* FILE) -> int
function sysctl(int* NAMES, int NLEN, void* OLDVAL, size_t -> int
function int sysconf(int PARAMETER) -> long
function int pathconf(const char* FILENAME, int PARAMETER) -> long
function int fpathconf(int FILEDES, int PARAMETER) -> long
function confstr(int PARAMETER, char* BUF, size_t LEN) -> size_t
function crypt(const char* PHRASE, const char* SALT) -> char*
function crypt_r(const char* PHRASE, const char* SALT, -> char*
function getentropy(void* BUFFER, size_t LENGTH) -> int
function getrandom(void* BUFFER, size_t LENGTH, unsigned -> ssize_t
function backtrace(void** BUFFER, int SIZE) -> int
function  backtrace_symbols(void* const* BUFFER, int SIZE) -> char**
function backtrace_symbols_fd(void* const* BUFFER, int SIZE, -> void
function thrd_create(thrd_t* THR, thrd_start_t FUNC, void -> int
function thrd_current(void) -> thrd_t
function thrd_equal(thrd_t LHS, thrd_t RHS) -> int
function thrd_sleep(const struct timespec* TIME_POINT, struct -> int
function thrd_yield(void) -> void
function void thrd_exit(int RES) -> _Noreturn
function thrd_detach(thrd_t THR) -> int
function thrd_join(thrd_t THR, int* RES) -> int
function call_once(once_flag* FLAG, void(*FUNC)(void)) -> void
function mtx_init(mtx_t* MUTEX, int TYPE) -> int
function mtx_lock(mtx_t* MUTEX) -> int
function mtx_timedlock(mtx_t* restrict MUTEX, const struct -> int
function mtx_trylock(mtx_t* MUTEX) -> int
function mtx_unlock(mtx_t* MUTEX) -> int
function mtx_destroy(mtx_t* MUTEX) -> void
function cnd_init(cnd_t* COND) -> int
function cnd_signal(cnd_t* COND) -> int
function cnd_broadcast(cnd_t* COND) -> int
function cnd_wait(cnd_t* COND, mtx_t* MUTEX) -> int
function cnd_timedwait(cnd_t* restrict COND, mtx_t* restrict -> int
function cnd_destroy(cnd_t* COND) -> void
function tss_create(tss_t* TSS_KEY, tss_dtor_t DESTRUCTOR) -> int
function tss_set(tss_t TSS_KEY, void* VAL) -> int
function tss_get(tss_t TSS_KEY) -> void*
function tss_delete(tss_t TSS_KEY) -> void
function pthread_key_create(pthread_key_t* KEY, void -> int
function pthread_key_delete(pthread_key_t KEY) -> int
function pthread_getspecific(pthread_key_t KEY) -> void*
function pthread_setspecific(pthread_key_t KEY, const void -> int
function pthread_getattr_default_np(pthread_attr_t* ATTR) -> int
function pthread_setattr_default_np(pthread_attr_t* ATTR) -> int
function __ppc_get_timebase(void) -> uint64_t
function __ppc_get_timebase_freq(void) -> uint64_t
function __ppc_yield(void) -> void
function __ppc_mdoio(void) -> void
function __ppc_mdoom(void) -> void
function __ppc_set_ppr_med(void) -> void
function __ppc_set_ppr_low(void) -> void
function __ppc_set_ppr_med_low(void) -> void
function __ppc_set_ppr_very_low(void) -> void
function __ppc_set_ppr_med_high(void) -> void
function __riscv_flush_icache(void* START, void* END, -> void